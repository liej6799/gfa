/*
 * gfa_web API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`api_identity_users_lookup_by_username_user_name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiIdentityUsersLookupByUsernameUserNameGetError {
    Status403(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status401(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status400(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status404(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status501(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status500(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_identity_users_lookup_count_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiIdentityUsersLookupCountGetError {
    Status403(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status401(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status400(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status404(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status501(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status500(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_identity_users_lookup_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiIdentityUsersLookupIdGetError {
    Status403(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status401(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status400(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status404(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status501(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status500(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_identity_users_lookup_search_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiIdentityUsersLookupSearchGetError {
    Status403(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status401(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status400(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status404(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status501(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    Status500(crate::models::VoloAbpHttpRemoteServiceErrorResponse),
    UnknownValue(serde_json::Value),
}


pub async fn api_identity_users_lookup_by_username_user_name_get(configuration: &configuration::Configuration, user_name: &str) -> Result<crate::models::VoloAbpUsersUserData, Error<ApiIdentityUsersLookupByUsernameUserNameGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/identity/users/lookup/by-username/{userName}", local_var_configuration.base_path, userName=crate::apis::urlencode(user_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiIdentityUsersLookupByUsernameUserNameGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_identity_users_lookup_count_get(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<i64, Error<ApiIdentityUsersLookupCountGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/identity/users/lookup/count", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder = local_var_req_builder.query(&[("Filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiIdentityUsersLookupCountGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_identity_users_lookup_id_get(configuration: &configuration::Configuration, id: &str) -> Result<crate::models::VoloAbpUsersUserData, Error<ApiIdentityUsersLookupIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/identity/users/lookup/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiIdentityUsersLookupIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_identity_users_lookup_search_get(configuration: &configuration::Configuration, filter: Option<&str>, sorting: Option<&str>, skip_count: Option<i32>, max_result_count: Option<i32>) -> Result<crate::models::VoloAbpApplicationDtosListResultDto1VoloAbpUsersUserDataVoloAbpUsersAbstractionsVersion4400CultureneutralPublicKeyTokennull, Error<ApiIdentityUsersLookupSearchGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/identity/users/lookup/search", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder = local_var_req_builder.query(&[("Filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sorting {
        local_var_req_builder = local_var_req_builder.query(&[("Sorting", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = skip_count {
        local_var_req_builder = local_var_req_builder.query(&[("SkipCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_result_count {
        local_var_req_builder = local_var_req_builder.query(&[("MaxResultCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiIdentityUsersLookupSearchGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

